PROMPT2 = """
False Sharing Bug Detection and Resolution

Role: C/C++ Code Analyzer and Optimizer

Task Description:
Detect and repair false sharing bugs in C/C++ code.

Definitions:
False sharing: occurs when multiple threads access disjoint bytes on the same cache line.
True sharing: occurs when multiple threads on different cores access overlapping bytes on the same cache line.

Guidelines for Detecting False Sharing:

- Look for contiguous arrays, nearby fields in the same object, or objects allocated close together.
- Identify variables frequently accessed by multiple threads, with at least one thread writing.
- Consider cache line size (typically 64 bytes) when analyzing memory layout.
- Look for variables that are close together in memory (such as in a struct or array) that are independently accessed by different threads.
- NOTE: If you find shared variables (like globals or data passed to threads) where multiple threads read and write to the same memory location, that is true sharing. Do not generate corrected code for true sharing memory errors.

Guidelines for Correction:

- Reduce writes to the cache line by using scratch variables or intermediate results.
- Separate variables using alignment and padding to prevent sharing the same cache line.

Chain of Thought:

1. Analyze the entire code structure based on the Guidelines for Detecting False Sharing.
2. Identify frequently accessed variables by multiple threads, ensuring they are close together in memory (potentially on the same cache line).
3. If a false sharing bug is found, follow steps 4-5 to correct the issue. Otherwise, proceed to step 6.
4. Generate a corrected code snippet using the Guidelines for Correction. Indicate which lines in the original code were modified.
5. Continue analyzing the rest of the code to detect any additional false sharing bugs.
6. If no false sharing bugs are found or if true sharing is detected, do nothing and proceed with the code analysis.

Example 1: Contiguous Array False Sharing

Input code:

int sharedArray[10];
void threadFunction(int tid) {
	for (int i = 0; i < 10000; i++) {
		sharedArray[tid]++;
	}
}

Step-by-step reasoning:
1. Identified contiguous array sharedArray accessed by multiple threads.
2. Detected frequent writes to sharedArray[tid] by multiple threads.
3. Applied alignas(64) to separate array elements and imported <stdalign.h>.

Corrected code:

#include <stdalign.h>
alignas(64) int sharedArray[10];
void threadFunction(int tid) {
	int localVar = 0;
	for (int i = 0; i < 10000; i++) {
		localVar++;
	}
	sharedArray[tid] = localVar;
}


Example 2: Struct False Sharing

Input code:

struct MyStruct {
	int field1;
	int field2;
};
MyStruct sharedStruct;

Step-by-step reasoning:
1. Identified struct MyStruct with nearby fields accessed by multiple threads.
2. Detected frequent writes to field1 and reads from field2.
3. Applied manual padding to separate struct fields.

Corrected code:

struct MyStruct {
	int field1;
	char padding1[64 - sizeof(int)];
	int field2;
	char padding2[64 - sizeof(int)];
};
MyStruct sharedStruct;

Example 3: Aligning Multiple Variables**

int var1;
int var2;
int var3;

Step-by-step reasoning:
1. Identified multiple variables accessed by multiple threads.
2. Detected frequent writes to var1 and var3, and reads from var2.
3. Applied alignas(64) to separate variables and imported <stdalign.h>.

Corrected code:

#include <stdalign.h>
alignas(64) int var1;
alignas(64) int var2;
alignas(64) int var3;

Example 4: No False Sharing Bug

Input code:

#include <stdalign.h>
alignas(64) int var1;
alignas(64) int var2;
void threadFunction1() {
	var1++;
}
void threadFunction2() {
	var2++;
}

Step-by-step reasoning:
1. Variables var1 and var2 are already aligned to separate cache lines.
2. Each variable is accessed by only one thread.
3. No false sharing bug exists.

Example 5: True Sharing Bug

Input code:

int sharedCounter = 0;
void threadFunction() {
	for (int i = 0; i < 10000; i++) {
		sharedCounter++;
	}
}

Step-by-step reasoning:
1. Identified the shared variable sharedCounter accessed by multiple threads.
2. Detected frequent writes to the same memory location by multiple threads.
3. This is a case of **true sharing** because multiple threads access and modify the same memory location.
4. Did not correct this memory error because it is not a false sharing bug.

Your Task:
Evaluate the following code example for false sharing bugs and provide corrected code.

Code Example:

{}

Task Requirements:

1. Determine whether the provided code contains false sharing bugs.
2. If a false sharing is present, provide corrections using alignment and padding techniques.
3. Rewrite only the modified code sections and provide line numbers that indicate which lines of the original code were modified.

Evaluation Criteria:

- Accuracy in detecting false sharing bugs
- Effectiveness of suggested corrections
- Efficiency of generated code snippets

Additional Instructions for Performing Task:

- Focus on identifying and correcting false sharing bugs.
- Limit output to rewritten code sections.
- Provide clear explanations for detected false sharing bugs and suggested corrections.
- Import <stdalign.h> library when using alignas
- Double check your generated code to ensure you have not unnecessarily changed the original code.
- Consider the possibility that the provided code does not have a false sharing bug.
- When given an example, number each line in the code. When you provide a corrected code solution, indicate which lines were modified.
- If you identify a true sharing bug, do not generate corrected code for it.

"""